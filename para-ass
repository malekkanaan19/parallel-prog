#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <mpi.h>


const int WIDTH = 1000;
const int HEIGHT = 1000;
const int MAX_ITERATIONS = 10000;

void mandelbrot(int startRow, int endRow, int* output) {
    double x, y, x0, y0, xtemp;
    int i, j, n;
    double complex, z, c;

    for (i = startRow; i < endRow; i++) {
        for (j = 0; j < WIDTH; j++) {
            x0 = ((double) j / WIDTH) * 3.5 - 2.5;
            y0 = ((double) i / HEIGHT) * 2 - 1;

            z = 0 + 0*i;
            c = x0 + y0 * i;
            n = 0;
            while (cabs(z) < 2 && n < MAX_ITERATIONS) {
                z = z * z + c;
                n++;
            }

            output[i * WIDTH + j] = n;
        }
    }
}

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int* output = (int*) malloc(sizeof(int) * WIDTH * HEIGHT);

    if (rank == 0) {
        // Master process
        double startTime, endTime;

        // Static method
        startTime = MPI_Wtime();
        int rowsPerProcess = HEIGHT / size;
        for (int i = 1; i < size; i++) {
            int startRow = i * rowsPerProcess;
            int endRow = startRow + rowsPerProcess;
            MPI_Send(&startRow, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
            MPI_Send(&endRow, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
        mandelbrot(0, rowsPerProcess, output);
        for (int i = 1; i < size; i++) {
            MPI_Recv(output + i * rowsPerProcess * WIDTH, rowsPerProcess * WIDTH, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        }
        endTime = MPI_Wtime();
        printf("Static method took %f seconds\n", endTime - startTime);

        // Dynamic method
        startTime = MPI_Wtime();
        int nextRow = rowsPerProcess * size;
        int numActive = size - 1;
        while (numActive > 0) {
            MPI_Status status;
            int buffer[2];
            MPI_Recv(buffer, 2, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
            int senderRank = status.MPI_SOURCE;
            int startRow =buffer[0];
            int endRow = buffer[1];
            MPI_Send(&nextRow, 1, MPI_INT, senderRank, 0, MPI_COMM_WORLD);
        if (nextRow < HEIGHT) {
            nextRow += rowsPerProcess;
        } else {
            numActive--;
        }
    }
    for (int i = 1; i < size; i++) {
        MPI_Recv(output + i * rowsPerProcess * WIDTH, rowsPerProcess * WIDTH, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    }
    endTime = MPI_Wtime();
    printf("Dynamic method took %f seconds\n", endTime - startTime);

    // Write output to file
    FILE* fp = fopen("mandelbrot.pgm", "w");
    fprintf(fp, "P2\n");
    fprintf(fp, "%d %d\n", WIDTH, HEIGHT);
    fprintf(fp, "255\n");
    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            fprintf(fp, "%d ", output[i * WIDTH + j]);
        }
        fprintf(fp, "\n");
    }
    fclose(fp);
} else {
    // Worker process
    while (1) {
        int buffer[2];
        MPI_Send(buffer, 2, MPI_INT, 0, 0, MPI_COMM_WORLD);
        int startRow;
        MPI_Recv(&startRow, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        if (startRow >= HEIGHT) {
            break;
        }
        int endRow = startRow + (HEIGHT / size);
        mandelbrot(startRow, endRow, output + startRow * WIDTH);
        MPI_Send(output + startRow * WIDTH, (endRow - startRow) * WIDTH, MPI_INT, 0, 0, MPI_COMM_WORLD);
    }
    free(output);
MPI_Finalize();
return 0;
}
}



